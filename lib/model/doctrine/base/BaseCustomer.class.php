<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Customer', 'doctrine');

/**
 * BaseCustomer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $nick
 * @property timestamp $deadline
 * @property string $session_key
 * @property string $parameters
 * @property string $sign
 * @property timestamp $last_publish_time
 * @property timestamp $last_quick_publish_time
 * @property integer $quick_publish_times
 * @property Doctrine_Collection $Blog
 * @property Doctrine_Collection $BlogAccount
 * @property Doctrine_Collection $PublicAccount
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method string              getNick()                    Returns the current record's "nick" value
 * @method timestamp           getDeadline()                Returns the current record's "deadline" value
 * @method string              getSessionKey()              Returns the current record's "session_key" value
 * @method string              getParameters()              Returns the current record's "parameters" value
 * @method string              getSign()                    Returns the current record's "sign" value
 * @method timestamp           getLastPublishTime()         Returns the current record's "last_publish_time" value
 * @method timestamp           getLastQuickPublishTime()    Returns the current record's "last_quick_publish_time" value
 * @method integer             getQuickPublishTimes()       Returns the current record's "quick_publish_times" value
 * @method Doctrine_Collection getBlog()                    Returns the current record's "Blog" collection
 * @method Doctrine_Collection getBlogAccount()             Returns the current record's "BlogAccount" collection
 * @method Doctrine_Collection getPublicAccount()           Returns the current record's "PublicAccount" collection
 * @method Customer            setId()                      Sets the current record's "id" value
 * @method Customer            setNick()                    Sets the current record's "nick" value
 * @method Customer            setDeadline()                Sets the current record's "deadline" value
 * @method Customer            setSessionKey()              Sets the current record's "session_key" value
 * @method Customer            setParameters()              Sets the current record's "parameters" value
 * @method Customer            setSign()                    Sets the current record's "sign" value
 * @method Customer            setLastPublishTime()         Sets the current record's "last_publish_time" value
 * @method Customer            setLastQuickPublishTime()    Sets the current record's "last_quick_publish_time" value
 * @method Customer            setQuickPublishTimes()       Sets the current record's "quick_publish_times" value
 * @method Customer            setBlog()                    Sets the current record's "Blog" collection
 * @method Customer            setBlogAccount()             Sets the current record's "BlogAccount" collection
 * @method Customer            setPublicAccount()           Sets the current record's "PublicAccount" collection
 * 
 * @package    tbshare
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCustomer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('customer');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nick', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('deadline', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('session_key', 'string', 512, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 512,
             ));
        $this->hasColumn('parameters', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('sign', 'string', 512, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 512,
             ));
        $this->hasColumn('last_publish_time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('last_quick_publish_time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('quick_publish_times', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '20',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Blog', array(
             'local' => 'id',
             'foreign' => 'customer_id'));

        $this->hasMany('BlogAccount', array(
             'local' => 'id',
             'foreign' => 'customer_id'));

        $this->hasMany('PublicAccount', array(
             'local' => 'id',
             'foreign' => 'customer_id'));
    }
}